function [tube_in, reed_access] =  make_tract_normalised(args)

shape = args.shape;
final_theta = args.final_theta;

new()
set_precision('float');
set_message_level(0);
set_info('modal-normalisation',false);

tract_calibrate = make_controller('dynamic',1,-1,0,'tract-calibrate');

scaler = 5e-4;

[tube_in,bell_access] = make_instrument(shape,final_theta,false);
tube_in_admittance = make_controller('expression',1,-1,'get_info(''admittance'',in(1))',tube_in);

reed_freq = make_controller('DYNAMIC',1,-1,352.0149,'reed-freq');

%make_point_output(reed_freq,1);

reed_freq_container = make_controller('container',1,reed_freq);
reed_loss = make_controller('DYNAMIC',1,-1,30,'reed-loss');
reed_ampl = make_controller('DYNAMIC',1,-1,1/scaler,'reed-ampl');
reed = make_object('single-point',const(1), reed_freq, reed_loss, reed_ampl);
%save_object(reed,'sp.modal');
reed_access  = make_access(reed,const(1),'normal');

reed_static_stiffness_value = make_controller('dynamic',1,-1,0,'reed-static-stiffness-value');
reed_static_stiffness_value_container = make_controller('container',1,reed_static_stiffness_value);
reed_static_stiffness = ...
		make_controller('expression',1,-1,'v=get_info(''static-stiffness'',in(1));set_value(in(2),0,v);v', ...
				[reed_access,reed_static_stiffness_value_container,reed_freq]);

reed_admittance_value = make_controller('dynamic',1,-1,0,'reed-admittance-value');
reed_admittance_value_container = make_controller('container',1,reed_admittance_value);
reed_admittance = ...
		make_controller('expression',1,-1,'v=get_info(''admittance'',in(1));set_value(in(2),0,v);v', ...
				[reed_access,reed_admittance_value_container,reed_freq]);


reduced_pressure = make_controller('DYNAMIC',1,-1,0,'gamma');
reduced_pressure_container = make_controller('container',1,reduced_pressure);

noise_cutoff  = make_controller('dynamic', 1, -1,15000,'noise-cutoff');
noise_generator =  make_controller('bandlimited-noise', 1, 0, noise_cutoff,4);


equilibrium_position_lg2nrmlsd = make_controller('dynamic',1,-1,0,'equilibrium-position-lg2nrmlsd');
equilibrium_position_nrmlsd = make_controller('expression',1,-1,'exp2(in(1,1))',equilibrium_position_lg2nrmlsd);
equilibrium_position = make_controller('expression',1,-1,'in(2,1)*in(1,1)',[const(5e-3),equilibrium_position_nrmlsd]);
make_controller('expression',0,-1,'set_info(''access-position-offset'',in(1),in(2,1))',reed_access,equilibrium_position);

rho_cntrl = const(1.2);
front_angle = const(180);

front_area_lg2nrmlsd = make_controller('dynamic',1,-1,0,'front-area-lg2nrmlsd');
front_area_nrmlsd = make_controller('expression',1,-1,'exp2(in(1,1))',front_area_lg2nrmlsd);
%front_area = make_controller('arithmetic',1,'*',[const(scaler),const(7e-6),front_area_nrmlsd]);


valve_aperture_length_lg2nrmlsd = make_controller('dynamic',1,-1,0,'valve-aperture-length-lg2nrmlsd');
valve_aperture_length_nrmlsd = make_controller('expression',1,-1,'exp2(in(1,1))',valve_aperture_length_lg2nrmlsd);
valve_aperture_length = make_controller('arithmetic',1,'*',[const(sqrt(scaler)),const(1),valve_aperture_length_nrmlsd]);


zeta = make_controller('dynamic',1,-1,300,'zeta');

front_area = make_controller('expression',1,-1, ...
		[ 'k_r = in(1,1);Zc=in(4,1);ad=in(3,1);y_0=in(5,1);w = in(8,1); zeta = in(7,1); ' ...	
			'z = zeta/(Zc*w); ' ...
			'in(9,1)*in(6,1)*.5*(ad*k_r/y_0)*z*z' ], ...
			{reed_static_stiffness_value, ...
				tube_in, ...
				rho_cntrl, ...
				tube_in_admittance, ...
				equilibrium_position, ...
				const(scaler), ...
				zeta, ...
				valve_aperture_length, ...
				front_area_nrmlsd });

K_y0 = make_controller('EXPRESSION',1,-1, ...
			[ 'k_r = in(1,1); fa = in(2,1); y_0 = in(3,1); K = if(fa,k_r/fa,0); ' ...
				'K*y_0'], ...
			{reed_static_stiffness_value, ...
				front_area, ...
				equilibrium_position});

final_pressure = make_controller('expression',1,0,'in(1,1)*in(2,1)',[K_y0,reduced_pressure]);

noise_level = make_controller('dynamic',1,-1,.1,'noise-level');

noise_scaler = make_controller('expression',1,0,'in(5,1)*in(4,1)*in(1,1)*in(2,1)^3*in(3,1)^4.5',const(1e-3), ...
							equilibrium_position_nrmlsd,valve_aperture_length_nrmlsd,noise_level,reduced_pressure);

if false
	reed_connection = make_connection('VALVE', ...
          reed_access,get_value(equilibrium_position,0),tube_in, ...
          final_pressure, ...
          const(1.2), ...
          const(0), ...
          front_area, ...
          const(180), ...
          valve_aperture_length);
else
		under_area = const(0.);
		air_viscosity = const(1.7e-5);
		canal_length = const(1e-3);

		reed_connection = make_connection('LEAKY-VALVE', ...
						reed_access,get_value(equilibrium_position,0),tube_in, ...
						final_pressure, ...
						rho_cntrl, ...
						air_viscosity, ...
						under_area, ...
						front_area, ...
						front_angle, ...
						valve_aperture_length, ...
						canal_length);
end

make_connection('force',tube_in,noise_generator,noise_scaler);

tube_speed_in = make_controller('ACCESS-SPEED',1,tube_in);
tube_speed_in_container = make_controller('container',1,tube_speed_in);
tube_speed_in_dev = make_controller('moment',1,const(1/100),2,tube_speed_in);
tube_speed_in_dev_container = make_controller('container',1,tube_speed_in_dev);

tube_position_in = make_controller('ACCESS-POSITION',1,tube_in,[0]);
tube_position_in_container = make_controller('container',1,tube_position_in);
tube_position_in_mean = make_controller('MOMENT',1,const(1/50),1,tube_position_in);
tube_position_in_mean_container = make_controller('container',1,tube_position_in_mean);

%make_point_output(tube_position_in_mean,1)


pitch_measurer_signal_value = make_controller('dynamic',1,-1,0,'pitch-measurer-signal-value');

%DEBUG
%make_point_output(pitch_measurer_signal_value,2);

pitch_measurer_signal_n = make_controller('DYNAMIC',1,-1,1,'pitch-measurer-signal-n');
pitch_measurer_signal_n_container = make_controller('CONTAINER',1,pitch_measurer_signal_n);
pitch_measurer_signal_value_container = make_controller('container',1,pitch_measurer_signal_value);
pitch_measurer_signal = make_controller('EXPRESSION',5,1*get_info('sample-period'), ...
		[ 'f=out(1);t=out(2);sig_prev=out(3);counter=out(4);' ...
				'sig=in(1,1);level=in(3,1);' ...
				'a=sig-level;' ...
				'b=sig_prev;' ...
				'if (a * b) < 0 ' ...
				'  n = round(in(4,1)); ' ...
				'  counter = counter + 1; ' ...
				'  if counter >= 2*n ' ...
				'    dt=get_info(''SAMPLE-PERIOD'');' ...
				'	   t_prev = t;' ...
				'	   t = get_info(''TIME'')-a/(a-b)*dt;' ...
				'	   f=.5*counter/(t-t_prev);' ...
				'    set_value(in(2),0,f);'  ...
				'	   counter = 0;' ...
				'  end;' ...
				'end;' ...
				'[f,t,a,counter]'], ...
					tube_position_in, ...
					pitch_measurer_signal_value_container, ...
					tube_position_in_mean, ...
					pitch_measurer_signal_n ...
			);

pitch_measurer_state_value = make_controller('dynamic',1,-1,0,'pitch-measurer-state-value');
pitch_measurer_state_value_container = make_controller('container',1,pitch_measurer_state_value);
connection_state = make_controller('connection-state',1,reed_connection);
pitch_measurer_state = make_controller('expression',2,-1, ...
			[ 'f = out(1); t_prev = out(2); ' ...
				'tube_pos = get_value(in(3),0) ; tpm = get_value(in(4),0);  ' ...
				'tube_speed = get_value(in(5),0); tsm = sqrt(get_value(in(6),0)); ' ...
			 	'if ~in(1,1) && (tube_pos < tpm) && (abs(tube_speed) < 1.5*tsm) '  ...
			 	'  t = get_info(''time''); ' ...
				'  f = 1/(t-t_prev) ; ' ...
				'  set_value(in(2),0,f); ' ...
				'  t_prev = t; ' ...
				'end ; ' ...
				'[f,t_prev]'], ...
					connection_state, ...
					pitch_measurer_state_value_container, ...
					tube_position_in_container, ...
					tube_position_in_mean_container, ...
					tube_speed_in_container, ...
					tube_speed_in_dev_container ...
					);

%make_point_output(tube_position_in,1)
%make_point_output(pitch_measurer,1)
%make_point_output(tube_speed_in,1);
%make_point_output(tube_position_in,2);

amplification = make_controller('dynamic',1,-1,1,'amplification');

% compensation on equilibrium position
expr_string = [ ' ' ...
	'val = in(1,1); ' ...
	'if val < -2 ' ...
	'	y= 5.46; ' ...							
	'else ' ...
	'	x = log2(3+val); ' ...
	'	if x < .4 ' ...
	'		y = 0.78101*x + 5.4594; ' ...
	'	else ' ...
	'		if x < 1.96 ' ...
	'			y = 3.7766*x + 4.3011; ' ...
	'		else ' ...
	'			if val < 2 ' ...
	'				y = -186.05*x^3 + 1225.2*x^2 -2681.5*x + 1961.4; ' ...
	'			else ' ...
	'				y = 11.6; ' ...
	'			end ' ...
	'		end ' ...
	'	end ' ...
	'end ; ' ...
	'exp2(-y)' ];
compensation_1 = make_controller('expression',1,-1,expr_string,equilibrium_position_lg2nrmlsd);


final_amplification = make_controller('arithmetic',1,'*',[const(.25),amplification,compensation_1]);


make_point_output(bell_access,0,final_amplification);

% for verify calibration
%{
make_point_output(tube_speed_in,1);
make_point_output(tube_position_in,2);
make_point_output(tube_position_in_mean,3);
%}


midi_note_range = make_controller('dynamic',2,-1,[25 68],'midi-note-range');


data = load('reed_freq.mat');

a = data.reed_freq(get_value(midi_note_range,0):get_value(midi_note_range,1),:)';
%a = zeros(get_value(midi_note_range,1),4);

note_freq = make_controller('dynamic',1,-1,0,'note-freq');
note_freq_container = make_controller('container',1,note_freq);


midi_note_on = make_controller('dynamic',3,-1,[0 0 0],'midi-note-on');
midi_note_on_container = make_controller('container',1,midi_note_on);
midi_note_off = make_controller('dynamic',3,-1,[0 0 0],'midi-note-off');
midi_note_off_container = make_controller('container',1,midi_note_off);


midi_note_table_input = const([get_value(midi_note_range,0):get_value(midi_note_range,1)]);
midi_note_table_input_container = make_controller('container',1,midi_note_table_input);
param_output = const(a(:));

param_memory = const(zeros(127,1));
param_memory_container = make_controller('container',1,param_memory);

note_count = make_controller('expression',1,-1, [ ...
					'nc = out(1);  ' ...
					'nc = nc + 1;  ' ...
					'nc '
					], ...
					[midi_note_on]);

make_controller('expression',3,-1, [ ...
					'mn_on = in(1,2); mn_off = in(2,2)  ; ac_count = out(1) ; calib = in(7,1); ' ...
					'gamma = 0; last_mn_on = out(2);  ' ...
					'if mn_on ' ...
					'  ac_count = ac_count + 1 ; ' ...
					'end ; ' ...
					'if mn_off ' ...
					'  ac_count = ac_count - 1 ; ' ...
					'end ; ' ...
					'if ~calib && ac_count ' ...
					'  gamma = in(1,3)/127; ' ...
					'  set_value_time(in(3),0,gamma,.01); ' ...
					'end ; ' ...
					'if ~calib && (out(1) && ~ac_count) ' ...
					'  set_value_time(in(3),0,gamma,.01); ' ...
					'end ; ' ...
					'if mn_on ' ...
					'  val = mn_on; ' ...
					'  set_value(in(11),0,midi_to_freq(mn_on)); ' ...
					'  if calib ' ...
					'    val = mn_on ; ' ...
					'  else ' ...
					'    gamma = in(1,3)/127 ; '  ...
					'    index_0 = mn_on - in(13,1); ' ...
					'    alpha = .25; beta = .2; ' ...
					'    index_gamma_float = min(4,max(1,1/alpha*(gamma-beta) + 1)) ; ' ...
					'    index_4 = floor(index_gamma_float); ' ...
					'    index_4_nxt = min(4,index_4+1); ' ...
					'    alpha = index_gamma_float - index_4; ' ...
					'    val = (1-alpha) * in(10,4*index_0+index_4) + alpha * in(10,4*index_0+index_4_nxt); ' ...
					'    val_from_calib = val; ' ...
					'  end ; ' ...
					'  f = midi_to_freq(val); '  ...
					'  set_value_time(in(4),0,f,0); ' ...
					'  last_mn_on = mn_on; ' ...
					'end ; ' ...
					'set_value(in(5),1,0); ' ...
					'set_value(in(6),1,0); ' ...
					'[ac_count,last_mn_on] ' ...
					], [midi_note_on, ...
							midi_note_off, ...
							reduced_pressure_container, ...
							reed_freq_container, ...
							midi_note_on_container, ...
							midi_note_off_container, ...
							tract_calibrate, ...
							midi_note_table_input, ...
							midi_note_table_input_container, ...
							param_output, ...
							note_freq_container, ...
							const(0), ...
							midi_note_range ...
							]);

pitch_corrector_gate = make_controller('dynamic',1,-1,1,'pitch-corrector-gate');
pitch_corrector_gate_container = make_controller('container',1,pitch_corrector_gate);

make_controller('expression',0,-1,'set_value(in(1),0,get_value(in(1),0)&&~in(2,1))', ...
										[pitch_corrector_gate_container,tract_calibrate]);

pitch_corrector_rate = make_controller('dynamic',1,-1,1.3,'pitch-corrector-rate');

pitch_corrector_rate_scaler = make_controller('dynamic',1,-1,1.5,'pitch-corrector-rate-scaler');
pitch_corrector_rate_scaler_container = make_controller('container',1,pitch_corrector_rate_scaler);

pitch_corrector_period = make_controller('dynamic',1,-1,.02,'pitch-corrector-period');
pitch_corrector_period_container = make_controller('container',1,pitch_corrector_period);
pitch_banger = make_controller('timer',1,pitch_corrector_period,const(1));
send_message('pitch-corrector-period',1/(220*.8));
make_controller('expression',0,-1,'f = in(1,1); set_value(in(2),0,1/(.8*f)) ', ...
		[note_freq,pitch_corrector_period_container]);

pitch_corrector = make_controller('EXPRESSION',2,-1, ...
		[ ...
		'if in(8,1) ' ...
		'  f_trgt = in(1,1); f_msrd = get_value(in(2),0); ' ...
		'  nc = in(9,1); ' ...
		'  if f_trgt ~= out(1) || nc ~= out(2) ' ...
		'    set_value(in(4),0,0); ' ...
		'    set_value_time(in(4),0,1,.05); ' ...
		'    set_value(in(7),0,1); ' ...
		'    set_value_time(in(7),0,4,.5); ' ...
		'  end ; ' ...
		'  if f_trgt && f_msrd ' ...
		'    delta = freq_to_midi(f_msrd) - freq_to_midi(f_trgt) ; ' ...
		'    rate_scaler = get_value(in(4),0);' ...
		'    if abs(delta) < 10' ...
		'      rf = get_value(in(3),0); ' ...
		'      rf = (1-1e-2*in(5,1)*rate_scaler*delta)*rf ; ' ...
		'      set_value_time(in(3),0,rf,4*get_info(''sample-period'')); ' ...
		'    end ;' ...
		'    if rate_scaler >= 1 ' ...
		'      set_value_time(in(4),0,0,.35); ' ...
		'    end ; ' ...
		'  end; ' ...
		'end ; ' ...
		'[f_trgt,nc]' ], ...
		[note_freq, ...
			pitch_measurer_signal_value_container, ...
			reed_freq_container, ...
			pitch_corrector_rate_scaler_container, ...
			pitch_corrector_rate, ...
			pitch_banger, ...
			pitch_measurer_signal_n_container,  ...
			pitch_corrector_gate, ...
			note_count ...
		]);






